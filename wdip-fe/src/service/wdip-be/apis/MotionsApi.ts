// tslint:disable
/**
 * WDIP
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: markus@silberstein.nu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Motion,
    MotionFromJSON,
    MotionToJSON,
    Motions,
    MotionsFromJSON,
    MotionsToJSON,
    MotionsByParty,
    MotionsByPartyFromJSON,
    MotionsByPartyToJSON,
    Party,
    PartyFromJSON,
    PartyToJSON,
} from '../models';

export interface GetMotionRequest {
    id: string;
}

export interface GetMotionsByPartyRequest {
    fromDate?: string;
    toDate?: string;
}

export interface GetMotionsForPartyRequest {
    id: string;
    fromDate?: string;
    toDate?: string;
    fromResultNo?: number;
}

/**
 * no description
 */
export class MotionsApi extends runtime.BaseAPI {

    /**
     * Gets motion for the specified id
     */
    async getMotionRaw(requestParameters: GetMotionRequest): Promise<runtime.ApiResponse<Motion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/motions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MotionFromJSON(jsonValue));
    }

    /**
     * Gets motion for the specified id
     */
    async getMotion(requestParameters: GetMotionRequest): Promise<Motion> {
        const response = await this.getMotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a summary of all motions by party
     */
    async getMotionsByPartyRaw(requestParameters: GetMotionsByPartyRequest): Promise<runtime.ApiResponse<MotionsByParty>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = requestParameters.toDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/motions/byparty`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MotionsByPartyFromJSON(jsonValue));
    }

    /**
     * Get a summary of all motions by party
     */
    async getMotionsByParty(requestParameters: GetMotionsByPartyRequest): Promise<MotionsByParty> {
        const response = await this.getMotionsByPartyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets motions for the specified party and time period
     */
    async getMotionsForPartyRaw(requestParameters: GetMotionsForPartyRequest): Promise<runtime.ApiResponse<Motions>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMotionsForParty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = requestParameters.toDate;
        }

        if (requestParameters.fromResultNo !== undefined) {
            queryParameters['fromResultNo'] = requestParameters.fromResultNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/motions/byparty/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MotionsFromJSON(jsonValue));
    }

    /**
     * Gets motions for the specified party and time period
     */
    async getMotionsForParty(requestParameters: GetMotionsForPartyRequest): Promise<Motions> {
        const response = await this.getMotionsForPartyRaw(requestParameters);
        return await response.value();
    }

}
