/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * WDIP
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: markus@silberstein.nu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:3001".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * 
     * @type {number}
     * @memberof ErrorModel
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorModel
     */
    message: string;
}

/**
 * 
 * @export
 * @interface Motion
 */
export interface Motion {
    /**
     * 
     * @type {string}
     * @memberof Motion
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Motion
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Motion
     */
    documentStatus: string;
    /**
     * 
     * @type {string}
     * @memberof Motion
     */
    documentType: string;
    /**
     * 
     * @type {Array<Proposal>}
     * @memberof Motion
     */
    proposals: Array<Proposal>;
    /**
     * 
     * @type {Array<Stakeholder>}
     * @memberof Motion
     */
    stakeholders: Array<Stakeholder>;
}

/**
 * 
 * @export
 * @interface Motions
 */
export interface Motions {
    /**
     * 
     * @type {Array<Motion>}
     * @memberof Motions
     */
    results?: Array<Motion>;
    /**
     * 
     * @type {number}
     * @memberof Motions
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof Motions
     */
    startResult?: number;
    /**
     * 
     * @type {number}
     * @memberof Motions
     */
    endResult?: number;
}

/**
 * 
 * @export
 * @interface MotionsByParty
 */
export interface MotionsByParty {
    /**
     * 
     * @type {string}
     * @memberof MotionsByParty
     */
    fromDate: string;
    /**
     * 
     * @type {string}
     * @memberof MotionsByParty
     */
    toDate: string;
    /**
     * 
     * @type {Array<MotionsByPartyResults>}
     * @memberof MotionsByParty
     */
    results: Array<MotionsByPartyResults>;
}

/**
 * 
 * @export
 * @interface MotionsByPartyResults
 */
export interface MotionsByPartyResults {
    /**
     * 
     * @type {string}
     * @memberof MotionsByPartyResults
     */
    party?: string;
    /**
     * 
     * @type {number}
     * @memberof MotionsByPartyResults
     */
    submitted?: number;
    /**
     * 
     * @type {number}
     * @memberof MotionsByPartyResults
     */
    approved?: number;
    /**
     * 
     * @type {number}
     * @memberof MotionsByPartyResults
     */
    declined?: number;
}

/**
 * 
 * @export
 * @interface Party
 */
export interface Party {
    /**
     * 
     * @type {string}
     * @memberof Party
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Party
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof Party
     */
    y: number;
    /**
     * 
     * @type {string}
     * @memberof Party
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof Party
     */
    name: string;
}

/**
 * 
 * @export
 * @interface Proposal
 */
export interface Proposal {
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    wording: string;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    committeeStatus: string;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    chamberStatus: string;
}

/**
 * 
 * @export
 * @interface Stakeholder
 */
export interface Stakeholder {
    /**
     * 
     * @type {string}
     * @memberof Stakeholder
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Stakeholder
     */
    name: string;
    /**
     * 
     * @type {Party}
     * @memberof Stakeholder
     */
    party: Party;
}

/**
 * 
 * @export
 * @interface Word
 */
export interface Word {
    /**
     * 
     * @type {string}
     * @memberof Word
     */
    text: string;
    /**
     * 
     * @type {number}
     * @memberof Word
     */
    value: number;
}


/**
 * ChartsApi - fetch parameter creator
 * @export
 */
export const ChartsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets word cloud data, ie keywords and their frequency
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordCloud(fromDate?: string, toDate?: string, options: any = {}): FetchArgs {
            const localVarPath = `/charts/wordcloud`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChartsApi - functional programming interface
 * @export
 */
export const ChartsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets word cloud data, ie keywords and their frequency
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordCloud(fromDate?: string, toDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Word>> {
            const localVarFetchArgs = ChartsApiFetchParamCreator(configuration).getWordCloud(fromDate, toDate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ChartsApi - factory interface
 * @export
 */
export const ChartsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Gets word cloud data, ie keywords and their frequency
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordCloud(fromDate?: string, toDate?: string, options?: any) {
            return ChartsApiFp(configuration).getWordCloud(fromDate, toDate, options)(fetch, basePath);
        },
    };
};

/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
export class ChartsApi extends BaseAPI {
    /**
     * 
     * @summary Gets word cloud data, ie keywords and their frequency
     * @param {string} [fromDate] From which date (inclusive) data should be returned.
     * @param {string} [toDate] To which date (inclusive) data should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    public getWordCloud(fromDate?: string, toDate?: string, options?: any) {
        return ChartsApiFp(this.configuration).getWordCloud(fromDate, toDate, options)(this.fetch, this.basePath);
    }

}

/**
 * MotionsApi - fetch parameter creator
 * @export
 */
export const MotionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets motion for the specified id
         * @param {string} id Identifier for motion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotion(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMotion.');
            }
            const localVarPath = `/motions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a summary of all motions by party
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotionsByParty(fromDate?: string, toDate?: string, options: any = {}): FetchArgs {
            const localVarPath = `/motions/byparty`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets motions for the specified party and time period
         * @param {string} id Identifier for party
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {number} [fromResultNo] Where to begin the batch of results (pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotionsForParty(id: string, fromDate?: string, toDate?: string, fromResultNo?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMotionsForParty.');
            }
            const localVarPath = `/motions/byparty/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            if (fromResultNo !== undefined) {
                localVarQueryParameter['fromResultNo'] = fromResultNo;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MotionsApi - functional programming interface
 * @export
 */
export const MotionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets motion for the specified id
         * @param {string} id Identifier for motion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotion(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Motion> {
            const localVarFetchArgs = MotionsApiFetchParamCreator(configuration).getMotion(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a summary of all motions by party
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotionsByParty(fromDate?: string, toDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MotionsByParty> {
            const localVarFetchArgs = MotionsApiFetchParamCreator(configuration).getMotionsByParty(fromDate, toDate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets motions for the specified party and time period
         * @param {string} id Identifier for party
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {number} [fromResultNo] Where to begin the batch of results (pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotionsForParty(id: string, fromDate?: string, toDate?: string, fromResultNo?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Motions> {
            const localVarFetchArgs = MotionsApiFetchParamCreator(configuration).getMotionsForParty(id, fromDate, toDate, fromResultNo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MotionsApi - factory interface
 * @export
 */
export const MotionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Gets motion for the specified id
         * @param {string} id Identifier for motion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotion(id: string, options?: any) {
            return MotionsApiFp(configuration).getMotion(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a summary of all motions by party
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotionsByParty(fromDate?: string, toDate?: string, options?: any) {
            return MotionsApiFp(configuration).getMotionsByParty(fromDate, toDate, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets motions for the specified party and time period
         * @param {string} id Identifier for party
         * @param {string} [fromDate] From which date (inclusive) data should be returned.
         * @param {string} [toDate] To which date (inclusive) data should be returned.
         * @param {number} [fromResultNo] Where to begin the batch of results (pagination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMotionsForParty(id: string, fromDate?: string, toDate?: string, fromResultNo?: number, options?: any) {
            return MotionsApiFp(configuration).getMotionsForParty(id, fromDate, toDate, fromResultNo, options)(fetch, basePath);
        },
    };
};

/**
 * MotionsApi - object-oriented interface
 * @export
 * @class MotionsApi
 * @extends {BaseAPI}
 */
export class MotionsApi extends BaseAPI {
    /**
     * 
     * @summary Gets motion for the specified id
     * @param {string} id Identifier for motion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotionsApi
     */
    public getMotion(id: string, options?: any) {
        return MotionsApiFp(this.configuration).getMotion(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a summary of all motions by party
     * @param {string} [fromDate] From which date (inclusive) data should be returned.
     * @param {string} [toDate] To which date (inclusive) data should be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotionsApi
     */
    public getMotionsByParty(fromDate?: string, toDate?: string, options?: any) {
        return MotionsApiFp(this.configuration).getMotionsByParty(fromDate, toDate, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets motions for the specified party and time period
     * @param {string} id Identifier for party
     * @param {string} [fromDate] From which date (inclusive) data should be returned.
     * @param {string} [toDate] To which date (inclusive) data should be returned.
     * @param {number} [fromResultNo] Where to begin the batch of results (pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MotionsApi
     */
    public getMotionsForParty(id: string, fromDate?: string, toDate?: string, fromResultNo?: number, options?: any) {
        return MotionsApiFp(this.configuration).getMotionsForParty(id, fromDate, toDate, fromResultNo, options)(this.fetch, this.basePath);
    }

}

/**
 * PartyApi - fetch parameter creator
 * @export
 */
export const PartyApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets data for all the parties, i.e. GAL-TAN position and party color
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParties(options: any = {}): FetchArgs {
            const localVarPath = `/parties`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartyApi - functional programming interface
 * @export
 */
export const PartyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets data for all the parties, i.e. GAL-TAN position and party color
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParties(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Party>> {
            const localVarFetchArgs = PartyApiFetchParamCreator(configuration).getAllParties(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PartyApi - factory interface
 * @export
 */
export const PartyApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Gets data for all the parties, i.e. GAL-TAN position and party color
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParties(options?: any) {
            return PartyApiFp(configuration).getAllParties(options)(fetch, basePath);
        },
    };
};

/**
 * PartyApi - object-oriented interface
 * @export
 * @class PartyApi
 * @extends {BaseAPI}
 */
export class PartyApi extends BaseAPI {
    /**
     * 
     * @summary Gets data for all the parties, i.e. GAL-TAN position and party color
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public getAllParties(options?: any) {
        return PartyApiFp(this.configuration).getAllParties(options)(this.fetch, this.basePath);
    }

}

